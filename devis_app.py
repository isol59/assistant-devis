"""
devis_app.py
---------------

Application Streamlit pour g√©n√©rer des devis de projection de mousse polyur√©thane.
- Saisie de surfaces sous forme d'expression (ex : 20+10+5)
- √âpaisseur modifiable pour chaque zone (valeur par d√©faut calcul√©e via R = e/Œª)
- Option d'inclure/exclure la coupe+√©vacuation des d√©chets (Murs)
- Total en HT, puis s√©lection de TVA (5,5 % ou 20 %) et calcul TTC
"""

from __future__ import annotations

import streamlit as st


def calculate_thickness(resistance: float, lambda_value: float) -> float:
    """Retourne l'√©paisseur n√©cessaire (m) pour une r√©sistance thermique donn√©e.
    R = e / Œª  =>  e = R √ó Œª
    """
    return resistance * lambda_value


def parse_surface_input(value: str) -> float:
    """Convertit une expression utilisateur (ex: '20+10+5') en surface totale (m¬≤)."""
    if not value:
        return 0.0
    total = 0.0
    for part in value.split("+"):
        part = part.strip().replace(",", ".")
        try:
            total += float(part)
        except ValueError:
            continue
    return total


def run_app() -> None:
    st.set_page_config(page_title="Assistant de devis ‚Äì Mousse polyur√©thane", page_icon="üßæ", layout="centered")

    st.title("Assistant de devis pour mousse polyur√©thane projet√©e")
    st.markdown(
        """
        Calcule automatiquement **l'√©paisseur** et le **co√ªt** des mousses polyur√©thane projet√©es
        √† partir des surfaces et des r√©sistances thermiques requises.
        La r√©sistance thermique (R) suit la formule **R = e / Œª** (avec **e** en m√®tres et **Œª** en W/m¬∑K).
        """
    )

    # R√©sistances thermiques minimales (m¬≤¬∑K/W)
    resistances = {
        "Murs": 3.7,
        "Rampants": 6.2,
        "Combles": 7.0,
        "Vide sanitaires": 3.0,
        "Plafonds de cave": 3.0,
        "Sol": 3.0,
    }

    # Mousses disponibles
    foams = {
        "008E (cellules ouvertes)": {
            "lambda": 0.037,   # W/m¬∑K
            "price": 1.50,     # ‚Ç¨/cm/m¬≤
            "allowed_zones": {"Murs", "Rampants", "Combles", "Vide sanitaires"},
        },
        "240PX (cellules ferm√©es Isotrie)": {
            "lambda": 0.0225,  # corrig√© : 0.0225 W/m¬∑K
            "price": 3.80,
            "allowed_zones": {"Murs", "Sol", "Plafonds de cave"},
        },
        "35Z (cellules ferm√©es Synth√©sia)": {
            "lambda": 0.027,
            "price": 3.50,
            "allowed_zones": {"Murs", "Sol", "Plafonds de cave"},
        },
    }

    st.header("Informations g√©n√©rales")
    distance = st.number_input(
        "Distance aller simple en kilom√®tres (pour le d√©placement, 1 ‚Ç¨ / km A/R)",
        min_value=0.0,
        value=0.0,
        step=1.0,
    )
    travel_cost = distance * 2 * 1.0  # A/R

    total_material_cost = 0.0
    total_extra_cost = 0.0
    zone_summaries: list[str] = []

    st.header("Saisissez les surfaces et param√®tres par zone")
    for zone in resistances:
        with st.expander(f"{zone}"):
            # Surface en expression libre (ex : 20+10+5)
            surface_expr = st.text_input(
                f"Surface pour {zone.lower()} (m¬≤)",
                value="",
                placeholder="ex : 20+10+5",
                key=f"surface_{zone}",
            )
            surface = parse_surface_input(surface_expr)

            # Type de mousse autoris√© dans cette zone
            foam_options = [name for name, data in foams.items() if zone in data["allowed_zones"]]
            if not foam_options:
                st.warning("Aucune mousse disponible pour cette zone.")
                continue
            foam_choice = st.selectbox(
                f"Type de mousse pour {zone.lower()}",
                foam_options,
                key=f"foam_{zone}",
            )
            foam_data = foams[foam_choice]
            lambda_val = foam_data["lambda"]
            unit_price = foam_data["price"]

            # √âpaisseur par d√©faut (cm) selon R mini
            default_thickness_cm = calculate_thickness(resistances[zone], lambda_val) * 100.0

            # √âpaisseur modifiable pour TOUTES les zones (y compris Sol)
            thickness_cm = st.number_input(
                "√âpaisseur (cm)",
                min_value=0.0,
                value=float(f"{default_thickness_cm:.2f}"),
                step=0.1,
                key=f"thickness_{zone}",
                help="Modifiez si le client impose une √©paisseur pr√©cise.",
            )

            # R obtenu avec l'√©paisseur choisie
            r_calc = (thickness_cm / 100.0) / lambda_val if lambda_val > 0 else 0.0

            # Co√ªt mati√®re
            cost_per_m2 = thickness_cm * unit_price
            material_cost = cost_per_m2 * surface

            # Co√ªts suppl√©mentaires sp√©cifiques
            extra_cost = 0.0
            if zone == "Murs":
                include_cutting = st.checkbox(
                    "Inclure la coupe et l‚Äô√©vacuation des d√©chets (5 ‚Ç¨/m¬≤)",
                    value=True,
                    key=f"include_cutting_{zone}",
                )
                if include_cutting and surface > 0:
                    extra_cost += 5.0 * surface
                    st.caption(f"Coupe/√©vacuation : {5.0 * surface:.2f} ‚Ç¨")

                nb_menuiseries = st.number_input(
                    "Nombre de menuiseries √† prot√©ger (fen√™tres, baies, etc.)",
                    min_value=0,
                    value=0,
                    step=1,
                    key=f"nb_menuiseries_{zone}",
                )
                cost_per_menuiserie = st.number_input(
                    "Co√ªt de protection par menuiserie (‚Ç¨)",
                    min_value=0.0,
                    value=10.0,
                    step=1.0,
                    key=f"cost_menuiserie_{zone}",
                )
                extra_cost += nb_menuiseries * cost_per_menuiserie

            elif zone == "Sol":
                cost_protection = st.number_input(
                    "Co√ªt de protection des bas de murs et des fen√™tres (‚Ç¨)",
                    min_value=0.0,
                    value=0.0,
                    step=1.0,
                    key=f"cost_protection_{zone}",
                )
                extra_cost += cost_protection

                cost_sanding = st.number_input(
                    "Co√ªt du pon√ßage par m¬≤ (‚Ç¨)",
                    min_value=0.0,
                    value=0.0,
                    step=1.0,
                    key=f"cost_sanding_{zone}",
                )
                extra_cost += cost_sanding * surface

            elif zone == "Plafonds de cave":
                cost_cutting = st.number_input(
                    "Co√ªt coupe/√©vacuation par m¬≤ (optionnel)",
                    min_value=0.0,
                    value=0.0,
                    step=1.0,
                    key=f"cost_cutting_{zone}",
                )
                extra_cost += cost_cutting * surface

            # Affichage zone (uniquement si surface > 0)
            if surface > 0:
                st.write(
                    f"√âpaisseur : **{thickness_cm:.1f} cm** ‚Äì R obtenu ‚âÉ **{r_calc:.2f} m¬≤¬∑K/W**"
                )
                st.write(f"Co√ªt mousse (HT) : **{material_cost:.2f} ‚Ç¨**")
                if extra_cost > 0:
                    st.write(f"Frais suppl√©mentaires (HT) : **{extra_cost:.2f} ‚Ç¨**")
                st.write(f"Total zone (HT) : **{(material_cost + extra_cost):.2f} ‚Ç¨**")

            total_material_cost += material_cost
            total_extra_cost += extra_cost
            if surface > 0:
                zone_summaries.append(
                    f"{zone} : {surface:.1f} m¬≤, {thickness_cm:.1f} cm, mousse {material_cost:.2f} ‚Ç¨, extras {extra_cost:.2f} ‚Ç¨"
                )

    # R√©capitulatif & TVA
    total_ht = total_material_cost + total_extra_cost + travel_cost
    st.header("R√©capitulatif du devis")
    if zone_summaries:
        for summary in zone_summaries:
            st.write("‚Ä¢ " + summary)

    st.write(f"Co√ªt total des mousses (HT) : **{total_material_cost:.2f} ‚Ç¨**")
    st.write(f"Frais suppl√©mentaires (HT, hors d√©placement) : **{total_extra_cost:.2f} ‚Ç¨**")
    st.write(f"D√©placement (HT) : **{travel_cost:.2f} ‚Ç¨**")
    st.subheader(f"Montant HT : **{total_ht:.2f} ‚Ç¨**")

    tva_choix = st.selectbox("TVA", ["5.5 %", "20 %"], index=0)
    tva_taux = 0.055 if "5.5" in tva_choix else 0.20
    tva_montant = total_ht * tva_taux
    total_ttc = total_ht + tva_montant

    st.write(f"TVA ({tva_choix}) : **{tva_montant:.2f} ‚Ç¨**")
    st.subheader(f"Montant TTC : **{total_ttc:.2f} ‚Ç¨**")


if __name__ == "__main__":
    run_app()
